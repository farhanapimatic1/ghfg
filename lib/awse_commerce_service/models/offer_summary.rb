# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AwseCommerceService
  # OfferSummary Model.
  class OfferSummary < BaseModel
    # TODO: Write general description for this method
    # @return [Price]
    attr_accessor :lowest_new_price

    # TODO: Write general description for this method
    # @return [Price]
    attr_accessor :lowest_used_price

    # TODO: Write general description for this method
    # @return [Price]
    attr_accessor :lowest_collectible_price

    # TODO: Write general description for this method
    # @return [Price]
    attr_accessor :lowest_refurbished_price

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :total_new

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :total_used

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :total_collectible

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :total_refurbished

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['lowest_new_price'] = 'LowestNewPrice'
      @_hash['lowest_used_price'] = 'LowestUsedPrice'
      @_hash['lowest_collectible_price'] = 'LowestCollectiblePrice'
      @_hash['lowest_refurbished_price'] = 'LowestRefurbishedPrice'
      @_hash['total_new'] = 'TotalNew'
      @_hash['total_used'] = 'TotalUsed'
      @_hash['total_collectible'] = 'TotalCollectible'
      @_hash['total_refurbished'] = 'TotalRefurbished'
      @_hash
    end

    def initialize(lowest_new_price = nil,
                   lowest_used_price = nil,
                   lowest_collectible_price = nil,
                   lowest_refurbished_price = nil,
                   total_new = nil,
                   total_used = nil,
                   total_collectible = nil,
                   total_refurbished = nil)
      @lowest_new_price = lowest_new_price
      @lowest_used_price = lowest_used_price
      @lowest_collectible_price = lowest_collectible_price
      @lowest_refurbished_price = lowest_refurbished_price
      @total_new = total_new
      @total_used = total_used
      @total_collectible = total_collectible
      @total_refurbished = total_refurbished
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      lowest_new_price = Price.from_hash(hash['LowestNewPrice']) if
        hash['LowestNewPrice']
      lowest_used_price = Price.from_hash(hash['LowestUsedPrice']) if
        hash['LowestUsedPrice']
      lowest_collectible_price = Price.from_hash(hash['LowestCollectiblePrice']) if
        hash['LowestCollectiblePrice']
      lowest_refurbished_price = Price.from_hash(hash['LowestRefurbishedPrice']) if
        hash['LowestRefurbishedPrice']
      total_new = hash['TotalNew']
      total_used = hash['TotalUsed']
      total_collectible = hash['TotalCollectible']
      total_refurbished = hash['TotalRefurbished']

      # Create object from extracted values.
      OfferSummary.new(lowest_new_price,
                       lowest_used_price,
                       lowest_collectible_price,
                       lowest_refurbished_price,
                       total_new,
                       total_used,
                       total_collectible,
                       total_refurbished)
    end
  end
end
