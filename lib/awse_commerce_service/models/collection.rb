# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AwseCommerceService
  # Collection Model.
  class Collection < BaseModel
    # TODO: Write general description for this method
    # @return [CollectionSummary]
    attr_accessor :collection_summary

    # TODO: Write general description for this method
    # @return [CollectionParent]
    attr_accessor :collection_parent

    # TODO: Write general description for this method
    # @return [List of CollectionItem]
    attr_accessor :collection_item

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['collection_summary'] = 'CollectionSummary'
      @_hash['collection_parent'] = 'CollectionParent'
      @_hash['collection_item'] = 'CollectionItem'
      @_hash
    end

    def initialize(collection_summary = nil,
                   collection_parent = nil,
                   collection_item = nil)
      @collection_summary = collection_summary
      @collection_parent = collection_parent
      @collection_item = collection_item
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      collection_summary = CollectionSummary.from_hash(hash['CollectionSummary']) if
        hash['CollectionSummary']
      collection_parent = CollectionParent.from_hash(hash['CollectionParent']) if
        hash['CollectionParent']
      # Parameter is an array, so we need to iterate through it
      collection_item = nil
      unless hash['CollectionItem'].nil?
        collection_item = []
        hash['CollectionItem'].each do |structure|
          collection_item << (CollectionItem.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      Collection.new(collection_summary,
                     collection_parent,
                     collection_item)
    end
  end
end
