# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AwseCommerceService
  # BrowseNode Model.
  class BrowseNode < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :browse_node_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :is_category_root

    # TODO: Write general description for this method
    # @return [Properties]
    attr_accessor :properties

    # TODO: Write general description for this method
    # @return [Children]
    attr_accessor :children

    # TODO: Write general description for this method
    # @return [Ancestors]
    attr_accessor :ancestors

    # TODO: Write general description for this method
    # @return [TopSellers]
    attr_accessor :top_sellers

    # TODO: Write general description for this method
    # @return [NewReleases]
    attr_accessor :new_releases

    # TODO: Write general description for this method
    # @return [List of TopItemSet]
    attr_accessor :top_item_set

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['browse_node_id'] = 'BrowseNodeId'
      @_hash['name'] = 'Name'
      @_hash['is_category_root'] = 'IsCategoryRoot'
      @_hash['properties'] = 'Properties'
      @_hash['children'] = 'Children'
      @_hash['ancestors'] = 'Ancestors'
      @_hash['top_sellers'] = 'TopSellers'
      @_hash['new_releases'] = 'NewReleases'
      @_hash['top_item_set'] = 'TopItemSet'
      @_hash
    end

    def initialize(browse_node_id = nil,
                   name = nil,
                   is_category_root = nil,
                   properties = nil,
                   children = nil,
                   ancestors = nil,
                   top_sellers = nil,
                   new_releases = nil,
                   top_item_set = nil)
      @browse_node_id = browse_node_id
      @name = name
      @is_category_root = is_category_root
      @properties = properties
      @children = children
      @ancestors = ancestors
      @top_sellers = top_sellers
      @new_releases = new_releases
      @top_item_set = top_item_set
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      browse_node_id = hash['BrowseNodeId']
      name = hash['Name']
      is_category_root = hash['IsCategoryRoot']
      properties = Properties.from_hash(hash['Properties']) if
        hash['Properties']
      children = Children.from_hash(hash['Children']) if hash['Children']
      ancestors = Ancestors.from_hash(hash['Ancestors']) if hash['Ancestors']
      top_sellers = TopSellers.from_hash(hash['TopSellers']) if
        hash['TopSellers']
      new_releases = NewReleases.from_hash(hash['NewReleases']) if
        hash['NewReleases']
      # Parameter is an array, so we need to iterate through it
      top_item_set = nil
      unless hash['TopItemSet'].nil?
        top_item_set = []
        hash['TopItemSet'].each do |structure|
          top_item_set << (TopItemSet.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      BrowseNode.new(browse_node_id,
                     name,
                     is_category_root,
                     properties,
                     children,
                     ancestors,
                     top_sellers,
                     new_releases,
                     top_item_set)
    end
  end
end
