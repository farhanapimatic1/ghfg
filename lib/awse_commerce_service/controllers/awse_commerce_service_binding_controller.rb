# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module AwseCommerceService
  # AWSECommerceServiceBindingController
  class AWSECommerceServiceBindingController < BaseController
    @instance = AWSECommerceServiceBindingController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_9(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_10(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_11(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_12(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_13(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_14(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_15(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_16(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_17(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCA
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_18(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_19(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_20(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_21(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_22(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_23(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_24(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_25(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_26(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTCN
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_27(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_28(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_29(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_30(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_31(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_32(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_33(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_34(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_35(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTDE
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_36(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_37(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_38(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_39(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_40(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_41(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_42(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_43(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_44(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTES
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_45(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_46(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_47(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_48(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_49(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_50(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_51(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_52(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_53(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTFR
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_54(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_55(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_56(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_57(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_58(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_59(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_60(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_61(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_62(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIN
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_63(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_64(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_65(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_66(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_67(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_68(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_69(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_70(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_71(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTIT
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_72(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_73(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_74(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_75(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_76(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_77(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_78(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_79(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_80(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTJP
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_81(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_82(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_83(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_84(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_85(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_86(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_87(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_88(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_89(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUK
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemSearchRequestMsg] body Required parameter: Example:
    # @return ItemSearchResponseMsg response from the API call
    def create_item_search_90(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/ItemSearch'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemSearchResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [ItemLookupRequestMsg] body Required parameter: Example:
    # @return ItemLookupResponseMsg response from the API call
    def create_item_lookup_91(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/ItemLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ItemLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [BrowseNodeLookupRequestMsg] body Required parameter: Example:
    # @return BrowseNodeLookupResponseMsg response from the API call
    def create_browse_node_lookup_92(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/BrowseNodeLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      BrowseNodeLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [SimilarityLookupRequestMsg] body Required parameter: Example:
    # @return SimilarityLookupResponseMsg response from the API call
    def create_similarity_lookup_93(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/SimilarityLookup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SimilarityLookupResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartGetRequestMsg] body Required parameter: Example:
    # @return CartGetResponseMsg response from the API call
    def create_cart_get_94(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartGet'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartGetResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartAddRequestMsg] body Required parameter: Example:
    # @return CartAddResponseMsg response from the API call
    def create_cart_add_95(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartAdd'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartAddResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartCreateRequestMsg] body Required parameter: Example:
    # @return CartCreateResponseMsg response from the API call
    def create_cart_create_96(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartCreate'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartCreateResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartModifyRequestMsg] body Required parameter: Example:
    # @return CartModifyResponseMsg response from the API call
    def create_cart_modify_97(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartModify'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartModifyResponseMsg.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [CartClearRequestMsg] body Required parameter: Example:
    # @return CartClearResponseMsg response from the API call
    def create_cart_clear_98(body)
      # Prepare query url.
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::AWSECOMMERCESERVICEPORTUS
      )
      _query_builder << '/CartClear'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      CartClearResponseMsg.from_hash(decoded)
    end
  end
end
