/*
 * apimaticcalculator_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
package simplecalculator_pkg


import(
	"strconv"
	"apimaticcalculator_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"apimaticcalculator_lib"
	"apimaticcalculator_lib/apihelper_pkg"
)

/*
 * Input structure for the method GetCalculate
 */
type GetCalculateInput struct {
    Operation       models_pkg.OperationTypeEnum //The operator to apply on the variables
    X               interface{}     //The LHS value
    Y               float64         //The RHS value
}

/*
 * Client structure as interface implementation
 */
type SIMPLECALCULATOR_IMPL struct { }

/**
 * Calculates the expression using the specified operation.
 * @param  GetCalculateInput     Structure with all inputs
 * @return	Returns the float64 response from the API call
 */
func (me *SIMPLECALCULATOR_IMPL) GetCalculate (input *GetCalculateInput) (float64, error) {
        //the base uri for api requests
    _queryBuilder := apimaticcalculator_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/{operation}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "operation" : models_pkg.OperationTypeEnumToValue(input.Operation),
    })
    if err != nil {
        //error in template param handling
        return 0.0, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "x" : input.X,
        "y" : input.Y,
    })
    if err != nil {
        //error in query param handling
        return 0.0, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return 0.0, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return 0.0, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return 0.0, err
    }

    //returning the response
    var retVal float64
    retVal, err = strconv.ParseFloat(_response.Body, 64)
    if err != nil {
        //error in parsing
        return 0.0, err
    }
    return retVal, nil
}

